// Code generated by MockGen. DO NOT EDIT.
// Source: repository/list-repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kuritaeiji/todo-gin-back/model"
)

// MockListRepository is a mock of ListRepository interface.
type MockListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockListRepositoryMockRecorder
}

// MockListRepositoryMockRecorder is the mock recorder for MockListRepository.
type MockListRepositoryMockRecorder struct {
	mock *MockListRepository
}

// NewMockListRepository creates a new mock instance.
func NewMockListRepository(ctrl *gomock.Controller) *MockListRepository {
	mock := &MockListRepository{ctrl: ctrl}
	mock.recorder = &MockListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepository) EXPECT() *MockListRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockListRepository) Create(arg0 *model.User, arg1 *model.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockListRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockListRepository)(nil).Create), arg0, arg1)
}

// FindLists mocks base method.
func (m *MockListRepository) FindLists(arg0 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindLists indicates an expected call of FindLists.
func (mr *MockListRepositoryMockRecorder) FindLists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLists", reflect.TypeOf((*MockListRepository)(nil).FindLists), arg0)
}
